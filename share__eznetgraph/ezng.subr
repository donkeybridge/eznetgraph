
# 
# Copyright (c) 2016, Benjamin L. Tischendorf
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, 
#    this list of conditions and the following disclaimer in the documentation 
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

#
## EZNG.SUBR provides some methods to ease creation of freebsd netgraphs
##
## Needs to be improved: Introduction
## 
#

#
## Uncomment the following line to activate the ezdbg() method.
#
DEBUG=1

################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
##
## Creating command shortcuts with absolute path 
##    for ngctl commands
#
WHEREIS="/usr/bin/whereis -bq" 

NGCTL="$(${WHEREIS} ngctl)"
SHUTDOWN="${NGCTL} shutdown"
CONNECT="${NGCTL} connect"
RMHOOK="${NGCTL} rmhook"
MKPEER="${NGCTL} mkpeer"
TYPES="${NGCTL} types"
LIST="${NGCTL} list"
NAME="${NGCTL} name"
SHOW="${NGCTL} show"
MSG="${NGCTL} msg"

#
## More commands used in the script
#
IFCONFIG=$(${WHEREIS} ifconfig )
TCPDUMP=$(${WHEREIS} tcpdump  )
KLDLOAD=$(${WHEREIS} kldload )
SYSCTL=$(${WHEREIS} sysctl )
MKTEMP=$(${WHEREIS} mktemp   )
PRINTF=$(${WHEREIS} printf   )
HEAD=$(${WHEREIS} head     )
TAIL=$(${WHEREIS} tail     )
GREP=$(${WHEREIS} grep     ) 
EXPR=$(${WHEREIS} expr     )
ECHO=$(${WHEREIS} echo     )
CUT=$(${WHEREIS} cut      )
AWK=$(${WHEREIS} awk      )
SED=$(${WHEREIS} sed      )
RM=$(${WHEREIS} rm       )
OD=$(${WHEREIS} od       )
TR="$(${WHEREIS} tr      ) -s ' '" 

#
## The mac prefix used for eiface MAC addresses
##   consider setting the LOCAL bit for this MAC address if you change this
##   if unsure, read https://tools.ietf.org/html/rfc5342
#
MAC_PREFIX="BE:EF:00"

#
## The list of supported netgraph types
#
EZNG_SUPPORTED="bpf bridge eiface ether hole socket tee"

################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
## 
#
echo "" > /tmp/dbg
ezdbg() {  test ${DEBUG:-0} -eq 1 && ${ECHO} "EZNG.SUBR ==> $1 "; } # >> /tmp/dbg; }
ezdbg "Loaded: ezdbg()"

ezexit() { ezdbg "EXIT: $*"; echo -e "$*" ; exit 1; }
ezdbg "Loaded: ezexit()"

################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
##
## Delete all named nodes of <type> from current nodelist.
##
#
ezng_delete_type()
{
  local $_ngtype $_list $_iface

  _ngtype=$1
  _list=$( ${LIST} | grep ${_ngtype} | cut -d ' ' -f 4 )

  ezdbg "Deleting all nodes of type $_ngtype..." 

  for _iface in $_list
  do
    ${SHUTDOWN} $_iface:
  done
}

ezdbg "Loaded: ezng_delete_type()"


################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
## 
## Check it type is among supported nodetypes.
##
#

ezng_valid_type() {
  local _type=$1
  [ "${_type}" = "" ] && ezexit "Missing type while validating, exiting ..." 
  [ "${_type}" != "${EZNG_SUPPORTED%$_type*}" ] && return 0
  ezexit "Tried to add unsupported type ${1} to graph. Exiting......."
}

ezdbg "Loaded: ezng_valid_type"

ezng_test_avail() {
  local _OLDIFS
  local _type 
  local _avail_types
  local _field
  local _loaded=0
  local _module_path=$(${SYSCTL} -b kern.module_path)

  ${TYPES} >/dev/null 2>&1
  [ $? != 0 ] && { 
    ezdbg "Netgraph support neither found in kernel nor as loaded modules, trying to load module now."; 
    _OLDIFS=$IFS; IFS=\; 
    for _field in `sysctl -b kern.module_path`
    do 
      ${KLDLOAD} ${_field}/netgraph.ko;
      [ $? = 0 ] && { _loaded=1; break; };
      IFS=$_OLDIFS
    done
    [ $_loaded = 0 ] && { echo "Could not load ${_module_path}/netgraph.ko, please assure netgraph support is available in kernel or as module before continuing. Exiting ... "; exit 1; }
    ezdbg " ... netgraph.ko loaded successfully."; 
  }

  _avail_types=$( ${TYPES} | ${GREP} -v "total\|Number\|------" | ${SED} 's/^ *//' | ${CUT} -d ' ' -f 1 )
  for _type in ${EZNG_SUPPORTED}; do 
    ezdbg "Checking whether needed type $_type is supported by kernel or module... "
    [ $(echo $_avail_types | ${SED} "s/${_type}/oMATCHo/" | grep oMATCHo | wc -l) != "1" ] && echo go
    if [ $(echo $_avail_types | ${SED} "s/${_type}/oMATCHo/" | grep oMATCHo | wc -l | ${SED} 's/^ *//') != "1" ]  
    then
      ezdbg "     ... $_type not found. Trying to load as module ... " ;
      _OLDIFS=$IFS; IFS=\;; _loaded=0
      for _field in `sysctl -b kern.module_path`
      do
        ${KLDLOAD} ${_field}/ng_${_type}.ko
        [ $? = 0 ] && { _loaded=1; break; };
        IFS=$_OLDIFS
      done
      [ $_loaded = 0 ] && { echo "Could not load $_type.ko, please assure this module is available or loaded or in kernel before continuing. Exiting ... "; exit 1; } ;
    fi 
  done
  # if we are here, all needed types are either available via kernel or loaded as module
}


################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
##
## Check if a planned hook is free to connect and valid for the nodes type.
## "Private" function, internal use only.
##
## Usage ezng_valid_hook node hook type (no colons!)
# 

ezng_valid_hook() {
  local _node _hook _type

  _node=$1
  _hook=$2
  _type=$3

  ${SHOW} $_node:$_hook 2>&1 > /dev/null
  [ $? = 0 ]      &&  ezexit "Cannot continue, $_node:$_hook is yet in use. Exiting ..." ;
  [ $_type = "" ] &&  ezexit "Missing type while validating, exiting ..." ;

  case $_type in

        hole | bridge | bpf )
          return 0
          ;;

	eiface )
          case $_hook in
	    ether )
		return 0
                ;;
            * )
                ezexit "Invalid hook $_hook for $_type, choose \'ether\'. Exiting ... "
                ;;
          esac
          ;;

	ether )	
          case $_hook in
            upper | lower | orphan )
                return 0
                ;;
            * )
                ezexit "Invalid hook $_hook for $_type, choose from \'upper | lower | orphan\'. Exiting ... "
                ;;
          esac;; 

	tee )
          case $_hook in
            left | right | left2right | right2left )
                return 0
                ;;
            * )
                ezexit "Invalid hook $_hook for $_type, choose from \'left | right | left2right | right2left\'. Exiting ... "
                ;;
          esac
          ;;

   	* )
	  ${ECHO} "Unsupported type $_type. Exiting ... "
          exit 1
	  ;;
  esac
  ${ECHO} "Something went wrong during validation. Exiting ... "
  exit 1

}
 
ezdbg "Loaded: ezng_valid_hook"


################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
##
## delete a row of commonly known types, used to completely reset 
## current netgraph to starting position.
##
#
ezng_fallback()
{
  ezdbg "Trying: Running fallback"
  ezng_delete_type bpf
  ezng_delete_type eiface
  ezng_delete_type tee
  ezng_delete_type bridge
}  

ezdbg "Loaded: ezng_fallback()"

################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
##
## Small method to generate a random MAC address. Based on the virtual.lan 
## example from the FreeBSD distribution. Find the original file in
## /usr/share/examples/netgraph/virtual.lan
##
## Usage: ezng_create_mac eifacename
#
ezng_create_mac()
{
  local _M4 _M5 _M6 _MAC

  _M4=$( ${OD} -An -N2 -i /dev/random | \
         ${SED} -e 's/ //g' |  \
         ${AWK} '{ print $1 % 256 }'  )

  _M5=$( ${OD} -An -N2 -i /dev/random | \
         ${SED} -e 's/ //g' |  \
         ${AWK} '{ print $1 % 256 }'  )

  _M6=$( ${OD} -An -N2 -i /dev/random | \
         ${SED} -e 's/ //g' |  \
         ${AWK} '{ print $1 % 256 }'  )

  _MAC=$( ${PRINTF} ${MAC_PREFIX}:%02x:%02x:%02x ${_M4} ${_M5} ${_M6} )

  ${IFCONFIG} $1 ether $_MAC
  ezdbg "Tried: ${IFCONFIG} $1 ether $_MAC"
}

ezdbg "Loaded: ezng_create_mac()"

################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
##
## One major feature of this script is wrapping ngctl commands to the human 
## readable form "node:hook:type". To split this within the script, the 
## following is method is used.
##
## Usage: ezng_split_on_colon $PARAM { node | hook | type } 
#
ezng_split_on_colon()
{
  local _node _hook _type _TMP

  _TMP=$( ${MKTEMP} )

  ${ECHO} $1 > $_TMP
  IFS=\: read _node _hook _type  < $_TMP
  case "$2" in
    "node") ${ECHO} $_node;;
    "hook") ${ECHO} $_hook;;
    "type") ezng_valid_type $_type && ${ECHO} $_type;;
    .)      ${ECHO} error;;
  esac
  ${RM} $_TMP
}

ezdbg "Loaded: ezng_split_on_single_colon()"

################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
##
## The netgraph documentation explains how to configure ng_bpf nodes on manpage
## https://www.freebsd.org/cgi/man.cgi?query=ng_bpf
## This is put into a method here.
##
## Take care: "printf" below is not ${PRINTF}, but awk internal command 
## 
## Usage: ezng_create_bpf_prog "expression"
#
ezng_create_bpf_prog()
{
  local _EXPRESSION _AWKTMP
  _EXPRESSION=$1

  _AWKTMP=$( ${MKTEMP} )
  cat > $_AWKTMP << xxENDxx
         {
           if (!init) {
             printf "bpf_prog_len=%d bpf_prog=[", \$1;
             init=1;
           } else {
             printf " { code=%d jt=%d jf=%d k=%d }", \$1, \$2, \$3, \$4;
           }
         }
         END {
           print " ]"
         }
xxENDxx

  BPFPROG=$( ${TCPDUMP} -s 8192 -ddd ${_EXPRESSION} | ${AWK} -f ${_AWKTMP} )
  ${ECHO} $BPFPROG
  ${RM} $_AWKTMP
}

ezdbg "Loaded: ezng_create_bpf_prog()"

################################################################################
#####0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
##
## For some use cases we need to clone the MAC address of an external interface 
## to a list of NETGRAPH eiface interfaces. 
##
## The default EXTIF is the first interface found by ifconfig. 
## Furthermore it might become overwriteable via commandline and by default
## is the first interface when running ifconfig.
#
ezng_clone_mac()
{
  local _EXTMAC _interface _external
  _interface=$1
  _external=$2
  _primary=$( ${IFCONFIG} | head -n1 | sed 's/:.*//' )
  _EXTIF=${_external:$_primary}
  _EXTMAC=$( ${IFCONFIG} ${_EXTIF} ether | grep ether | tr -s ' ' | cut -d ' ' -f 2 )

  ezdbg "Trying: ezng_clone_mac ... setting MAC address from ${EXTIF} on $@"

  for _interface in $@
  do
    ${IFCONFIG}     $_interface  ether   $_EXTMAC
  done
}

ezdbg "Loaded: ezng_clone_mac()"


################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
##
## ezng_new_peer() wraps the creation of a new peer (including naming the new
## node) into a single line. This function is only used internally, mostly 
## called by ezng_connect.
##
## Usage: ezng_new_peer src_name:hook:type peer_name:hook:type
#
ezng_new_peer()
{
  local _type _src _src_hook _peer _peer_hook 
  ezdbg "Trying: ezng_new_peer $1 $2"

        _src=$( ezng_split_on_colon $1 node )
   _src_hook=$( ezng_split_on_colon $1 hook )
   _src_type=$( ezng_split_on_colon $1 type )
       _peer=$( ezng_split_on_colon $2 node )
  _peer_hook=$( ezng_split_on_colon $2 hook )
  _peer_type=$( ezng_split_on_colon $2 type )

  ezdbg "        ... Making peer $_src: $_type $_src_hook $_peer_hook" 

  ${MKPEER} $_src: $_peer_type $_src_hook $_peer_hook
  local _error=$?
  [ $_error != "0" ] &&  ezexit   "  ... MKPEER exited on $_error"

  ezng_rename_node $_src $_src_hook $_peer_type $_peer
}

ezdbg "Loaded: ezng_new_peer()"

################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
##
##
#
ezng_node_exists()
{
  ${SHOW} $1: >/dev/null 2>&1
  [ $? = 0 ] && { echo 0; return 0; }
  echo 1
  return 1
}
  

ezdbg "Loaded: ezng_node_exists"

################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
##
## Usage: ezng_connect src:hook:type peer:hook:type
#
ezng_connect()
{
  local       _csrc  _csrc_hook  _csrc_type  _csrc_exists  _csrc_valid_hook\
             _cpeer _cpeer_hook _cpeer_type _cpeer_exists _cpeer_valid_hook

  ezdbg "Trying: ezng_connect $1 $2"
              _csrc=$( ezng_split_on_colon $1 node )
         _csrc_hook=$( ezng_split_on_colon $1 hook )
         _csrc_type=$( ezng_split_on_colon $1 type )
             _cpeer=$( ezng_split_on_colon $2 node )
        _cpeer_hook=$( ezng_split_on_colon $2 hook )
        _cpeer_type=$( ezng_split_on_colon $2 type )

       _csrc_exists=$( ezng_node_exists $_csrc ) 
      _cpeer_exists=$( ezng_node_exists $_cpeer)

   _csrc_valid_hook=$( ezng_valid_hook  $_csrc   $_csrc_hook  $_csrc_type)
  _cpeer_valid_hook=$( ezng_valid_hook  $_cpeer $_cpeer_hook $_cpeer_type) 

  ##########
  # if both nodes exist and have according free hooks,
  # a simple connection is made

  if [ "$_csrc_exists" = "0" -a "$_cpeer_exists" = "0" ]
  then
    ezdbg "$   ...  ${_csrc} exists and ${_cpeer} exists, calling CONNECT"
    ${CONNECT} $_csrc: $_cpeer: $_csrc_hook $_cpeer_hook;  
    [ $? != 0 ] && {
      ${ECHO} "Connecting $_csrc: $_cpeer: $_csrc_hook $_cpeer_hook failed, exiting ...";
      exit 1;
    };
    return 0 
  fi

  ##########
  # if either exist, the other one will be created and
  # connection is made

  if [ "$_csrc_exists" = "0" ] 
  then
    ezdbg "$   ... ${_csrc} exists but not ${_cpeer}, calling NEW_PEER"
    ezng_new_peer "$_csrc:$_csrc_hook:$_csrc_type" "$_cpeer:$_cpeer_hook:$_cpeer_type"; 
    [ $? != 0 ] && {
      ${ECHO} "Creating new peer from $_csrc:$_csrc_hook to $_cpeer:$_cpeer_hook failed, exiting ..." ;
      exit 1;
    };
    return 0
  fi

  if [ "$_cpeer_exists" = "0" ] 
  then
    ezdbg "$   ... ${_cpeer} exists but not ${_csrc}, calling NEW_PEER"
    ezng_new_peer "$_cpeer:$_cpeer_hook:$_cpeer_type" "$_csrc:$_csrc_hook:$_csrc_type";
    [ $? != 0 ] && {
      ${ECHO} "Creating new peer from $_cpeer:$_cpeer_hook to $_csrc:$_csrc_hook failed, exiting ..." ;
      exit 1;
    };
    return 0 
  fi
  
  #########
  # if neither exists, new graph is created with ezng_new_graph
  #
  ezdbg "$   ... neither ${_csrc} nor ${_cpeer} exist, calling NEW_GRAPH"
  ezng_new_graph "$_csrc:$_csrc_hook:$_csrc_type" "$_cpeer:$_cpeer_hook:$_cpeer_type"
  [ $? != 0 ] && {
    ${ECHO} "Creating new graph with $_csrc:$_csrc_hook:$_csrc_type and $_cpeer:$_cpeer_hook:$_cpeer_type failed, exiting ... ";
    exit 1;
  } 
  return 0
}

ezdbg "Loaded: ezng_connect()"

################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
##
## Usage: ezng_remove_hook node:hook
#
ezng_remove_hook()
{
  local _node _hook
  ezdbg "Trying: ezng_remove_hook $1"
  _node=$( ezng_split_on_colon $1 node )
  _hook=$( ezng_split_on_colon $1 hook )
  ${RMHOOK} $_node: $_hook
}

ezdbg "Loaded: ezng_remove_hook()"

################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
##
## This function renames a randomly named node.
##
## Usage: ezng_remove_hook node:hook
#

ezng_rename_node() 
{
  local _src _src_hook _type _name _last
  _src=$1; shift
  _src_hook=$1; shift
  _type=$1; shift
  _name=$1; shift
    
  if [ "$_type" = "eiface" ]
  then
    ezdbg "        rename: eiface ${_name} found" 
    _last=$( ${SHOW} $_src:$_src_hook | ${HEAD} -n1 | ${TR} | ${CUT} -f 4 -d ' ' )
    ezdbg "        naming and refacing $_last to $_name"
    ${NAME}     $_last:              $_name
    ${IFCONFIG} $_last        name   $_name 2>/dev/null >/dev/null
  else
    ezdbg "        naming $_src:$_src_hook to $_name"
    ${NAME}   $_src:$_src_hook $_name 2>/dev/null >/dev/null
  fi
}

ezdbg "Loaded: ezng_rename_node()"

################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
##
## This functions returns 0 (i.e. true), if the searched name + type does not 
## exist yet. Recommended to use only internally.
##
## Usage: ezng_not_in_graph name type
#

ezng_not_in_graph () {

  [ $(ngctl list  |grep "Type: ${2}" | grep "Name: ${1} " | wc -l) = '0' ] || return 0
  ${ECHO} "Cannot continue, ${1} of type ${2} does yet exist. Exiting ... " 
  return 1

}

ezdbg "Loaded: ezng_not_in_graph"

################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
##
## Since most nodetypes do not persist if they are not connected to another
## persistant node, it is sometimes neccessary to create a new graph out of the
## "nowhere" unless constantly working with ngctl -f, this is only applied 
## here. So this is the way to start a new netgraph. 
## The trick here is to create a temporary tee node bound to the current 
## ng_socket, attaching the new nodes to left and right hooks. Nodes attached
## to the tee are connected directly, as soon as the tee node is shut down.
##
## Please note that his function should only be used for creation of entirely
## virtual netgraphs. Netgraph containing genuine nodes like type "ether" or
## "ipfw" should only build by using ezng_connect.
## 
## Usage: ezng_new_graph node1:hook1:type node2:hook1:type
#
ezng_new_graph()
{
  local _node1 _hook1 _type1 _node2 _hook2 _type2 _ngtmp
  ezdbg "Trying: ezng_new_graph $1 $2"

  _node1=$( ezng_split_on_colon $1 node )
  _node2=$( ezng_split_on_colon $2 node )
  _hook1=$( ezng_split_on_colon $1 hook )
  _hook2=$( ezng_split_on_colon $2 hook )
  _type1=$( ezng_split_on_colon $1 type )
  _type2=$( ezng_split_on_colon $2 type )
  _ngtmp=$( ${MKTEMP} )
  (ezng_not_in_graph $_node1 $_type1 && ezng_not_in_graph $_node2 $_type2 ) || {
    ${ECHO} "Something went wrong while creating new graph (ezng_not_in_graph failed). Exiting...";
    return 1;
  }
  _TMPND=$( ${ECHO} $_ngtmp | sed 's/.*tmp.//' )
  cat > $_ngtmp << xxENDxx
    mkpeer .: tee $_TMPND left2right
    name   .:$_TMPND $TMPND
    mkpeer $_TMPND: $_type1 left  $_hook1
    mkpeer $_TMPND: $_type2 right $_hook2
xxENDxx

  ${NGCTL} -f $_ngtmp
  ezng_rename_node $TMPND left  $_type1 $_node1
  ezng_rename_node $TMPND right $_type2 $_node2
  ${SHUTDOWN} $_TMPND
  ${RM} $_ngtmp
}
  
ezdbg "Loaded: ezng_new_graph()"

################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
##
## After creating (and connecting) an ng_bpf, it remains unconfigured hence it
## drops all packets. As this scripts assumes that every bpf only has 3 nodes
## (match, nomatch and downstream--allthough hooks can be named indiviually), 
## we assume all incoming traffic is arriving on "downstream", filtered traffic 
## going to "match" and the rest on "nomatch". Following this assumtion the bpf
## node can be initialized as "unfiltered" by directing all traffic between
## downstream and nomatch. 
## Also the initialization prevents the filter from forgetting the flowback 
## configuration. Based on the assumption above, traffic arriving from both
## match and nomatch is directed to downstream. 
## 
## This function is not for public use any more.
#
ezng_bpf_init()
{
  local _node _prog
  _node=$1
  _prog=$( ezng_create_bpf_prog "" )
  ezdbg "Trying: ezng_bpf_init() $1 "

  ezdbg "        nomatch"
  ${MSG} $_node: setprogram { thisHook=\"nomatch\"    \
                               ifMatch=\"downstream\" \
                            ifNotMatch=\"downstream\"      ${_prog} }
  ezdbg "        match"
  ${MSG} $_node: setprogram { thisHook=\"match\"      \
                               ifMatch=\"downstream\" \
                            ifNotMatch=\"downstream\"      ${_prog} }
  ezdbg "        downstream"
  ${MSG} $_node: setprogram { thisHook=\"downstream\" \
                               ifMatch=\"nomatch\"    \
                            ifNotMatch=\"nomatch\"         ${_prog} }
}

ezdbg "Loaded: ezng_bpf_init()"

################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....
##
## Simple method to change the filter of initialized ng_bpf. (see
## ezng_bpf_init()
#
ezng_bpf_set()
{
  local _node _prog
  _node=$1
  _prog=$( ezng_create_bpf_prog "$2" )
  ezdbg "Trying: ezng_bpf_set $1 $2"
  ${MSG} $_node: setprogram { thisHook=\"downstream\" \
                               ifMatch=\"match\"      \
                            ifNotMatch=\"nomatch\"    $_prog }
}

ezdbg "Loaded: ezng_bpf_set()"

ezdbg "----- Finished loading ngctl.subr -----"
 
