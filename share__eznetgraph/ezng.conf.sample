## Currently only one external interface is supported. Please set the 
## name of the interface you want to use here: 

_extif="vmx0"

## To use any of the following examples, uncomment the according "the code:" 
## lines and then run '/sbin/service ezng onetest'. If the countdown runs 
## seamless most probably the code works with your setup. If not, the netgraph
## breaks your network connection, what for remote machines turns out to be 
## crucial. To put the graph in production, set eznetgraph_enable="YES" in 
## /etc/rc.conf or /etc/rc.conf.d/eznetgraph and run '/sbin/service ezng start'
## 
## The creation of one or more EIFACEs commonly provides network connections
## to jails. Please note, that is is planned (as of writing these lines in
## Dec 2017) to include VIMAGE / VNET in the GENERIC kernel of 12-STABLE. 
## Until this is effective, you have to build your own kernel e.g. after adding
##   options VIMAGE
## to the GENERIC kernel config.    
##
##
#################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....8
##
## Example 1: Filter all IPv6 to a virtual NIC using ethertype filter ETF
##
## The graph:
##
##  ________
## |        |
## |       upper - - - - - - - - -                     _________
## | ETHER  |                     |                   |         |
## | vmx0   |               ___nomatch__              |  EIFACE |
## |        |              |            |             |  ngx0   |
## |       lower - - - downstream     match - - - - ether       |
## |________|              |     ETF    |             |_________|
##                         |     o0_etf |
##                         |____________|
##
## The code: 
##
#  ezng_new_graph   o0_etf:match:etf ngx0:ether:eiface
#  ezng_etf_set     o0_etf 0x86dd
#  ezng_clone_mac   ngx0
#  ezng_connect     o0_etf:downstream ${_extif}:lower
#  ezng_connect     o0_etf:nomatch    ${_extif}:upper
##
##
## Explanation:  
## 
## Start a new graph by creating an ETF and an EIFACE node
## Please note that always the least known EIFACE name is used: 
## 
##   ezng_new_graph   o0_etf:match:etf ngx0:ether:eiface
## 
## Initialize the ETF for filtering IPv6 (ethertype 0x86dd): 
##
##   ezng_etf_set     o0_etf 0x86dd
##
## For IPv4, use ethertype 0x800 (IPv4) and 0x806 (ARP) instead 
##   ezng_etf_set   o0_etf 0x800 0x806
##
## Both interfaces need same MAC address to accept packages from router
##   ezng_clone_mac   ngeth0
##
## Put the ETF in production by connecting them to ETHER _extif
## 
##   ezng_connect     o0_etf:downstream ${_extif}:lower
##   ezng_connect     o0_etf:nomatch    ${_extif}:upper
##
##
#################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....8
##
## Example 2: Create a bridge with 4 connected interfaces
##
## The graph:
##                                                         ________
##                                                        |        |
##                                                        | EIFACE |
##  _________               ____________          - - - ether  ngy0|
## |         |             |            |       /         |________|
## |  EIFACE |             |          link2 - -           |        |
## |  ngx1   |             |   BRIDGE   |                 | EIFACE |
## |       ether - - - - link1        link3 - - - - - - ether  ngz0|
## |_________|             |  o0_bridge |                 |________|
##                         |          link4 - -           |        |
##                         |____________|       \         | EIFACE |
##                                                - - - ether  ngz1|
##                                                        |________|
## The code:
##
#  ezng_switched_connection o0_bridge ngx1 ngy0 ngz0 ngz1
##
##
## Explanation: 
##  
## With this oneliner a bridge is created, allowing to connect an arbitraty 
## number of further (network related) nodes. 
## 
## Combining example 1 and 2 of course offers a setup, that if you put ngx0 
## as outer interface to jail X and ngx1 as inner interface to that jail, 
## X can server as router / firewall / NAT for the virtual network behind, 
## containing jail Y (at ngy0) and jail z (at ngz1 and ngz1). Jail names and
## interface names are arbitrary, as long as they are unique, of course.
##
##
#################################################################################
#....0....1....0....2....0....1....0....4....0....1....0....2....0....1....0....8
##
## Example 2: Using Berkeley Packet filters to distribute IPv6 /64ers
##
##
##
##                          ____________               _________
##                         |            |             |         |
##  ________               |     BPF    |             |  EIFACE |
## |        |              |   secon_bpf|             |   ngy0  |
## |       upper - - - nomatch        match - - - - ether       |         
## |        |              |_downstream_|             |_________|
## | ETHER  |                     |                    _________
## | vmx0   |               ___nomatch__              |         |
## |        |              |            |             |  EIFACE |
## |       lower - - - downstream     match - - - - ether       |
## |________|              |     BPF    |             |   ngx0  |
##                         |   first_bpf|             |_________| 
##                         |____________|
##                                                        
##
## The code: 
## 
#  ezng_new_graph vmx0:lower:ether  first_bpf:downstream:bpf
#  ezng_new_peer  first_bpf:nomatch secon_bpf:downstream:bpf
#  ezng_bpf_init  first_bpf
#  ezng_bpf_init  secon_bpf
#  ezng_connect   secon_bpf:match   vmx0:upper
#  ezng_new_peer  first_bpf:match   ngx0:ether:eiface
#  ezng_bpf_set   first_bpf         "host 2001:db8:15:11/64 and port 443"
#  ezng_new_peer  secon_bpf:nomatch ngy0:ether:eiface
#  ezng_bpf_set   secon_bpf         "host 2001:db8:15:12/64 and port 22" 
##
##
## Explanation: 
##
## At first the 'circle' from _extif-lower to _extif upper is closed:
## 
##   ezng_new_graph vmx0:lower:ether  first_bpf:downstream:bpf
##   ezng_new_peer  first_bpf:nomatch secon_bpf:downstream:bpf
##   ezng_connect   secon_bpf:nomatch vmx0:upper
## 
## As, opposing ETF, no default rules are applied in the BPF node, no packets
## are forwarded anywhere. For that reason both nodes need to be initialized. 
## As convention in ezng, all nodes are initialized with 
##  - packages incoming from downstream will be forwarded to nomatch
##  - packages incoming from match      will be forwarded to downstream
##  - packages incoming from nomatch    will be forwarded to downstream
## Until the init is completed, no network connection is available on _extif,
## afterwards, network traffic is appearing like before.
##
##   ezng_bpf_init  first_bpf
##   ezng_bpf_init  secon_bpf
##
## Now the EIFACEs are created and according match-hooks are configured. Basically
## for BPF node type, hook names and flow rules are arbitraty. It is by convention
## in eznetgraph, that these hooks are name "downstream", "nomatch" and "match"
## and it is also by convention, that only one flow rule can be changed, i.e. 
## "downstream -> match".  
## 
##   ezng_new_peer  first_bpf:match   ngx0:ether:eiface
##   ezng_bpf_set   first_bpf         "host 2001:db8:15:11/64 and port 443"
##   ezng_new_peer  secon_bpf:match   ngy0:ether:eiface
##   ezng_bpf_set   secon_bpf         "host 2001:db8:15:12/64 and port 22" 
##
##

